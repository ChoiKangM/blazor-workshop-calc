@page "/calc-ExchangeRate"
@rendermode InteractiveServer
@inject IConfiguration Configuration
@inject HttpClient HttpClient

@using System.Net.Http
@using System.Text.Json;
@using System.Threading.Tasks;
@using System;

<style>
    .display-calc {
        width: 300px;
        text-align: right;
        font-size: 64px;
    }

    .button-number {
        height: 120px;
        width: 120px;
        background-color: lightskyblue;
        font-size: 24px;
    }

    .currency-unit{
        width: 50px;
        height: 80px;
        font-size: 60px;
    }

    .explain_currencyvalue{
        width: 300px;
        height: 80px;
        font-size: 100px;
    }
</style>

<PageTitle>Calc_Exchangerate</PageTitle>

<h1> &#x20A9 to $ Exchanger</h1>

<div style="display:flex">
    <label class="display-calc">@this.DisplayValue.ToString("#,#0.####")</label>
    <label class="currency-unit">@this.CurrencyUnit</label>
</div>

<label class="currency">@this.explain_currencyvalue</label>

<div style="display:flex">
    <button class="button-number" @onclick="() => clickButton(7)">7</button>
    <button class="button-number" @onclick="() => clickButton(8)">8</button>
    <button class="button-number" @onclick="() => clickButton(9)">9</button>
</div>

<div style="display:flex">
    <button class="button-number" @onclick="() => clickButton(4)">4</button>
    <button class="button-number" @onclick="() => clickButton(5)">5</button>
    <button class="button-number" @onclick="() => clickButton(6)">6</button>
</div>

<div style="display:flex">
    <button class="button-number" @onclick="() => clickButton(1)">1</button>
    <button class="button-number" @onclick="() => clickButton(2)">2</button>
    <button class="button-number" @onclick="() => clickButton(3)">3</button>
</div>

<div style="display:flex">
    <button class="button-number" @onclick="clickClear">C</button>
    <button class="button-number" @onclick="() => clickButton(0)">0</button>
    <button class="button-number" @onclick="clickResult">=</button>
</div>

@code {
    public class ExchangeRate
    {
        public int result { get; set; }
        public string cur_unit { get; set; }
        public string ttb { get; set; }
        public string tts { get; set; }
        public string deal_bas_r { get; set; }
        public string bkpr { get; set; }
        public string yy_efee_r { get; set; }
        public string ten_dd_efee_r { get; set; }
        public string kftc_bkpr { get; set; }
        public string kftc_deal_bas_r { get; set; }
        public string cur_nm { get; set; }
    }

    private float DisplayValue { get; set; } = 0;
    private float Currency {get; set;} = 0;
    private string CurrencyUnit { get; set; } = "\u20A9";
    private string explain_currencyvalue { get; set; } = " ";

    private async Task getExchangeJson()
    {
        string currentDate = DateTime.Now.ToString("yyyyMMdd");
        string authKey = Configuration["ApiAuthKey"] ?? string.Empty;
        string requestUrl = $"https://www.koreaexim.go.kr/site/program/financial/exchangeJSON?authkey={authKey}&searchdate={currentDate}&data=AP01";

     
        var exchangeRates = await HttpClient.GetFromJsonAsync<ExchangeRate[]>(requestUrl);
        var usd = exchangeRates?.FirstOrDefault(r => r.result == 1 && r.cur_unit == "USD");
        if (usd != null)
        {
            Currency = float.Parse(usd.deal_bas_r);
            explain_currencyvalue = $"1\u20A9 = {usd.deal_bas_r}$";
        }
        else
        {
            Console.WriteLine("USD 정보를 가져올 수 없습니다.");
        }
    }

    private void writeStatus()
    {
        Console.WriteLine($"DisplayValue[{this.DisplayValue}], currency[{this. Currency}]");
    }

    private void clickButton(int value)
    {
        DisplayValue = DisplayValue * 10 + value;
        writeStatus();
    }

    private async void clickResult()
    {
        await getExchangeJson();

        CurrencyUnit = "$";
        float temp = DisplayValue;
        DisplayValue = temp / Currency;
    
        StateHasChanged();

        writeStatus();
    }

    private void clickClear()
    {
        DisplayValue = 0;
        CurrencyUnit = "\u20A9";
        writeStatus();
    }
}
